# Generated by Django 5.2.4 on 2025-07-24 12:07

import db.slugtitlesave
import django.contrib.postgres.fields
import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='CountryList',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_name', models.CharField(db_index=True, max_length=150)),
                ('iso_code', models.CharField(max_length=2, unique=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
            ],
            options={
                'verbose_name': 'Country',
                'verbose_name_plural': 'Countries',
                'ordering': ['country_name'],
            },
            bases=(db.slugtitlesave.SlugTitleSaver, models.Model),
        ),
        migrations.CreateModel(
            name='FbCompetition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('competition_name', models.CharField(max_length=50)),
                ('type_competition', models.CharField(blank=True, choices=[('T', 'TOURNAMENT'), ('L', 'LEAGUE')], max_length=1)),
            ],
            options={
                'verbose_name': 'Football Competition',
                'verbose_name_plural': 'Football Competitions',
                'ordering': ['competition_name'],
            },
        ),
        migrations.CreateModel(
            name='IncidentClass',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('class_incident', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=200)),
            ],
            options={
                'verbose_name': 'Football Incident Class',
                'verbose_name_plural': 'Football Incident Clases',
                'ordering': ['class_incident'],
            },
            bases=(db.slugtitlesave.SlugTitleSaver, models.Model),
        ),
        migrations.CreateModel(
            name='FbCountry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_association_name', models.CharField(max_length=100)),
                ('short_association_name', models.CharField(max_length=10)),
                ('country_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.countrylist')),
                ('tournament_in_country', models.ManyToManyField(related_name='countries', to='db.fbcompetition')),
            ],
            options={
                'verbose_name': 'Football Country',
                'verbose_name_plural': 'Football Countries',
                'ordering': ['country_name'],
            },
        ),
        migrations.CreateModel(
            name='FbFederation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_fed', models.CharField(max_length=100, unique=True)),
                ('acronym_fed', models.CharField(max_length=10, unique=True)),
                ('type_fed', models.CharField(choices=[('GL', 'GLOBAL'), ('CN', 'CONTINENTAL')], max_length=2)),
                ('founded_year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1850), django.core.validators.MaxValueValidator(2100)])),
                ('members_count', models.PositiveIntegerField(help_text='Dont counting associate members')),
                ('associate_member_count', models.PositiveIntegerField(blank=True, default=0, help_text='Members who not full join to federation. Default value 0')),
                ('main_tournament', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='governing_federation', to='db.fbcompetition')),
                ('other_tournament', models.ManyToManyField(related_name='secondary_federation', to='db.fbcompetition')),
            ],
            options={
                'verbose_name': 'Football Federation',
                'verbose_name_plural': 'Football Federations',
                'ordering': ['acronym_fed'],
            },
        ),
        migrations.CreateModel(
            name='FbLeague',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count_team_in_league', models.IntegerField(default=0)),
                ('country_league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.countrylist')),
                ('league_name', models.ForeignKey(limit_choices_to={'type_competition': 'L'}, on_delete=django.db.models.deletion.CASCADE, to='db.fbcompetition')),
            ],
            options={
                'verbose_name': 'Football League',
                'verbose_name_plural': 'Football Leagues',
            },
        ),
        migrations.CreateModel(
            name='FbMatch',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('home_team_score', models.PositiveSmallIntegerField(default=0)),
                ('away_team_score', models.PositiveSmallIntegerField(default=0)),
                ('match_time', models.DateTimeField(db_index=True)),
                ('match_on_league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='league_match', to='db.fbleague')),
            ],
            options={
                'verbose_name': 'Football Match',
                'verbose_name_plural': 'Football Matches',
            },
        ),
        migrations.CreateModel(
            name='FbIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time_where_incedent_make', models.PositiveIntegerField()),
                ('is_own_goal', models.BooleanField()),
                ('is_home', models.BooleanField()),
                ('description', models.CharField(blank=True, max_length=150)),
                ('reason', models.CharField(blank=True, max_length=50)),
                ('match_where_incedent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.fbmatch')),
                ('incident_class', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.incidentclass')),
            ],
            options={
                'verbose_name': 'Football Incident',
                'verbose_name_plural': 'Football Incidents',
            },
        ),
        migrations.CreateModel(
            name='FbPlayer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('full_name', models.CharField(max_length=100)),
                ('short_name', models.CharField(max_length=50)),
                ('position', models.CharField(choices=[('GK', 'GOALKEEPER'), ('D', 'DEFENDER'), ('M', 'MIDFIELDER'), ('F', 'FORWARD')], max_length=2)),
                ('prefered_foot', models.CharField(choices=[('L', 'LEFT'), ('R', 'RIGHT'), ('B', 'BOTH')], max_length=2)),
                ('jersey_number', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('height', models.PositiveIntegerField()),
                ('date_of_birthday', models.DateField()),
                ('national', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.countrylist')),
            ],
            options={
                'verbose_name': 'Football Player',
                'verbose_name_plural': 'Football Players',
            },
        ),
        migrations.CreateModel(
            name='FbGoal',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incedent_goal', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.fbincident')),
                ('player_who_assist', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player_assist', to='db.fbplayer')),
                ('player_who_scored', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_scored', to='db.fbplayer')),
            ],
            options={
                'verbose_name': 'Football Goal',
                'verbose_name_plural': 'Football Goals',
            },
        ),
        migrations.CreateModel(
            name='FbSeason',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('start_season_year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1850), django.core.validators.MaxValueValidator(2100)])),
                ('end_season_year', models.PositiveIntegerField(validators=[django.core.validators.MinValueValidator(1850), django.core.validators.MaxValueValidator(2100)])),
                ('name_league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='seasons', to='db.fbleague')),
            ],
            options={
                'verbose_name': 'Football Season',
                'verbose_name_plural': 'Football Seasons',
                'ordering': ['name_league'],
            },
        ),
        migrations.CreateModel(
            name='FbSubstitution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('incedent_substitution', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.fbincident')),
                ('player_who_in', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_in', to='db.fbplayer')),
                ('player_who_out', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_out', to='db.fbplayer')),
            ],
            options={
                'verbose_name': 'Football substitution',
                'verbose_name_plural': 'Football substitutions',
            },
        ),
        migrations.CreateModel(
            name='FbTeam',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_name', models.CharField(max_length=50)),
                ('league_where_play_team', models.ManyToManyField(to='db.fbcompetition')),
            ],
            options={
                'verbose_name': 'Football Team',
                'verbose_name_plural': 'Football Teams',
            },
        ),
        migrations.AddField(
            model_name='fbplayer',
            name='played_in_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.fbteam'),
        ),
        migrations.AddField(
            model_name='fbmatch',
            name='away_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='away_team', to='db.fbteam'),
        ),
        migrations.AddField(
            model_name='fbmatch',
            name='home_team',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='home_team', to='db.fbteam'),
        ),
        migrations.CreateModel(
            name='TypeIncident',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name_incident', models.CharField(max_length=50, unique=True)),
                ('description_incident', models.CharField(blank=True, max_length=200)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('class_incident', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.incidentclass')),
            ],
            options={
                'verbose_name': 'Incedent',
                'verbose_name_plural': 'Incedents',
                'ordering': ['name_incident'],
            },
            bases=(db.slugtitlesave.SlugTitleSaver, models.Model),
        ),
        migrations.AddField(
            model_name='fbincident',
            name='incident_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.typeincident'),
        ),
        migrations.CreateModel(
            name='FbStandings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('match_played_count', models.PositiveIntegerField(default=0)),
                ('win_match_count', models.PositiveIntegerField(default=0)),
                ('lost_match_count', models.PositiveIntegerField(default=0)),
                ('draw_match_count', models.PositiveIntegerField(default=0)),
                ('difference_goal', models.IntegerField(default=0)),
                ('scored_goal', models.PositiveIntegerField(default=0)),
                ('missed_goal', models.PositiveIntegerField(default=0)),
                ('last_five_match', django.contrib.postgres.fields.ArrayField(base_field=models.CharField(max_length=1), blank=True, default=list, null=True, size=5)),
                ('season_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.fbseason')),
                ('standing_league', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.fbleague')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='db.fbteam')),
            ],
            options={
                'verbose_name': 'Football Standing',
                'verbose_name_plural': 'Football Standings',
                'unique_together': {('season_year', 'team', 'standing_league')},
            },
        ),
    ]
